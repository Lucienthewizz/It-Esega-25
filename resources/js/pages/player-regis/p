"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Head, useForm } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog"
import type { MLPlayer, PlayerRegistrationFormProps } from "@/types/register"
import { MLPlayerForm } from "@/components/registration/ml-player-form"
import { AlertCircle, CheckCircle2, HelpCircle, Info, Loader2, PlusCircle, Trash2, X } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Progress } from "@/components/ui/progress"
import { motion, AnimatePresence } from "framer-motion"
import { Toaster } from "@/components/ui/toaster"
import { useToast } from "@/components/ui/use-toast"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

export default function PlayerRegistrationForm({ teamData, gameType }: PlayerRegistrationFormProps) {
    const isML = gameType === "ml"
    const gameTitle = isML ? "Mobile Legends" : "Free Fire"
    const minPlayers = isML ? 5 : 5
    const maxPlayers = 7
    const { toast } = useToast()

    const themeColors = {
        primary: isML ? "bg-purple-600 hover:bg-purple-700 text-white" : "bg-orange-600 hover:bg-orange-700 text-white",
        secondary: isML ? "text-purple-600" : "text-orange-600",
        accent: isML ? "border-purple-200 bg-purple-50" : "border-orange-200 bg-orange-50",
        badge: isML ? "bg-purple-100 text-purple-800" : "bg-orange-100 text-orange-800",
        progress: isML ? "bg-purple-600" : "bg-orange-600",
        progressBg: isML ? "bg-purple-100" : "bg-orange-100",
    }

    const { data, setData, post, processing, errors } = useForm<{
        ml_players: MLPlayer[]
        team_id: number
    }>({
        ml_players: [],
        team_id: teamData.id,
    })

    const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false)
    const [playerToDelete, setPlayerToDelete] = useState<number | null>(null)
    const [showValidationError, setShowValidationError] = useState(false)
    const [progress, setProgress] = useState(0)

    useEffect(() => {
        // Calculate progress based on number of players added
        const currentProgress = Math.min((data.ml_players.length / minPlayers) * 100, 100)
        setProgress(currentProgress)
    }, [data.ml_players.length, minPlayers])

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()

        if (data.ml_players.length < minPlayers) {
            setShowValidationError(true)
            toast({
                variant: "destructive",
                title: "Not enough players",
                description: `You need at least ${minPlayers} players to submit the form.`,
            })
            return
        }

        post(route("player-registration.store"))
    }

    const handlePlayerChange = (index: number, field: keyof MLPlayer, value: string) => {
        const updatedPlayers = [...data.ml_players]
        updatedPlayers[index] = { ...updatedPlayers[index], [field]: value }
        setData("ml_players", updatedPlayers)
    }

    const addPlayer = () => {
        if (data.ml_players.length < maxPlayers) {
            const newPlayer: MLPlayer = {
                name: "",
                nickname: "",
                id: "",
                id_server: "",
                no_hp: "",
                email: "",
                alamat: "",
                tanda_tangan: null,
                ml_team_id: teamData.id,
                role: "anggota",
            }
            setData("ml_players", [...data.ml_players, newPlayer])

            // Scroll to the newly added player form
            setTimeout(() => {
                window.scrollTo({
                    top: document.body.scrollHeight,
                    behavior: "smooth",
                })
            }, 100)
        }
    }

    const openDeleteDialog = (index: number) => {
        setPlayerToDelete(index)
        setDeleteDialogOpen(true)
    }

    const closeDeleteDialog = () => {
        setDeleteDialogOpen(false)
        setPlayerToDelete(null)
    }

    const deletePlayer = () => {
        if (playerToDelete !== null) {
            const updatedPlayers = data.ml_players.filter((_, index) => index !== playerToDelete)
            setData("ml_players", updatedPlayers)
            closeDeleteDialog()

            toast({
                title: "Player removed",
                description: "The player has been removed from your team.",
            })
        }
    }

    return (
        <>
            <Head title={`${gameTitle} Player Registration`} />
            <Toaster />

            <div className="container mx-auto py-12 px-4">
                <Card className="max-w-5xl mx-auto overflow-hidden border-0 shadow-xl rounded-2xl">
                    <CardHeader
                        className={`p-8 ${isML ? "bg-gradient-to-r from-purple-700 to-indigo-800" : "bg-gradient-to-r from-orange-600 to-amber-600"} text-white`}
                    >
                        <div className="flex justify-between items-center">
                            <div>
                                <CardTitle className="text-3xl font-bold mb-2">{gameTitle} Player Registration</CardTitle>
                                <CardDescription className="text-white/80 text-lg">
                                    Team: <span className="font-medium">{teamData.team_name}</span>
                                </CardDescription>
                            </div>

                            <Dialog>
                                <DialogTrigger asChild>
                                    <Button variant="outline" className="bg-white/20 hover:bg-white/30 border-white/40 text-white">
                                        <HelpCircle className="mr-2 h-4 w-4" /> Help
                                    </Button>
                                </DialogTrigger>
                                <DialogContent className="sm:max-w-[500px]">
                                    <DialogHeader>
                                        <DialogTitle className="flex items-center text-xl">
                                            <Info className="mr-2 h-5 w-5 text-blue-500" />
                                            How to Fill Out the Form
                                        </DialogTitle>
                                    </DialogHeader>
                                    <div className="space-y-4 my-2">
                                        <p className="text-muted-foreground">Please fill out all the fields carefully:</p>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <h3 className="font-medium">Personal Information</h3>
                                                <ul className="space-y-1 text-sm">
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>Full Name: Enter the player's real name</span>
                                                    </li>
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>Nickname: Enter the player's in-game name</span>
                                                    </li>
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>Phone Number: A valid contact number</span>
                                                    </li>
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>Email: Your contact email address</span>
                                                    </li>
                                                </ul>
                                            </div>
                                            <div className="space-y-2">
                                                <h3 className="font-medium">Game Information</h3>
                                                <ul className="space-y-1 text-sm">
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>ML ID: Your Mobile Legends account ID</span>
                                                    </li>
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>Server ID: Your game server ID</span>
                                                    </li>
                                                    <li className="flex items-center gap-2">
                                                        <CheckCircle2 className="h-4 w-4 text-green-500" />
                                                        <span>Role: Choose from Ketua, Anggota, or Cadangan</span>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div className="pt-2">
                                            <h3 className="font-medium mb-2">Requirements</h3>
                                            <div className="flex flex-wrap gap-2">
                                                <Badge variant="outline" className="flex items-center gap-1">
                                                    <CheckCircle2 className="h-3 w-3" /> Min {minPlayers} players
                                                </Badge>
                                                <Badge variant="outline" className="flex items-center gap-1">
                                                    <CheckCircle2 className="h-3 w-3" /> Max {maxPlayers} players
                                                </Badge>
                                                <Badge variant="outline" className="flex items-center gap-1">
                                                    <CheckCircle2 className="h-3 w-3" /> Photo required
                                                </Badge>
                                                <Badge variant="outline" className="flex items-center gap-1">
                                                    <CheckCircle2 className="h-3 w-3" /> Signature required
                                                </Badge>
                                            </div>
                                        </div>
                                    </div>
                                </DialogContent>
                            </Dialog>
                        </div>
                    </CardHeader>

                    <div className="px-8 pt-6">
                        <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                                <span className="text-sm font-medium">Registration Progress</span>
                                <Badge className={themeColors.badge}>
                                    {data.ml_players.length}/{minPlayers} required players
                                </Badge>
                            </div>
                            <span className="text-sm font-medium">{Math.round(progress)}%</span>
                        </div>
                        <Progress value={progress} className={`h-2 ${themeColors.progressBg}`}>
                            <div className={`h-full ${themeColors.progress} rounded-full`} style={{ width: `${progress}%` }} />
                        </Progress>
                    </div>

                    <CardContent className="p-8">
                        <AnimatePresence>
                            {showValidationError && (
                                <motion.div
                                    initial={{ opacity: 0, y: -10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0, y: -10 }}
                                    className="mb-6"
                                >
                                    <Alert variant="destructive">
                                        <AlertCircle className="h-4 w-4" />
                                        <AlertTitle>Not enough players</AlertTitle>
                                        <AlertDescription>You need at least {minPlayers} players to submit the form.</AlertDescription>
                                    </Alert>
                                </motion.div>
                            )}
                        </AnimatePresence>

                        <form onSubmit={handleSubmit}>
                            <div className="space-y-6">
                                <AnimatePresence>
                                    {data.ml_players.map((player, index) => (
                                        <motion.div
                                            key={index}
                                            initial={{ opacity: 0, y: 20 }}
                                            animate={{ opacity: 1, y: 0 }}
                                            exit={{ opacity: 0, y: -20 }}
                                            transition={{ duration: 0.3 }}
                                        >
                                            <MLPlayerForm player={player} index={index} allPlayers={data.ml_players} onChange={(field, value) => handlePlayerChange(index, field, value)} onDelete={() => openDeleteDialog(index)} />

                                        </motion.div>
                                    ))}
                                </AnimatePresence>

                                <div className="flex flex-col sm:flex-row gap-4 justify-between items-center pt-4">
                                    <Button
                                        type="button"
                                        onClick={addPlayer}
                                        disabled={data.ml_players.length >= maxPlayers}
                                        className="w-full sm:w-auto border border-dashed bg-background hover:bg-muted"
                                    >
                                        <PlusCircle className="mr-2 h-4 w-4" />
                                        Add Player {data.ml_players.length < maxPlayers && `(${data.ml_players.length}/${maxPlayers})`}
                                    </Button>

                                    <Button
                                        type="submit"
                                        disabled={processing || data.ml_players.length < minPlayers}
                                        className={`w-full sm:w-auto ${themeColors.primary}`}
                                    >
                                        {processing ? (
                                            <>
                                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                                Processing...
                                            </>
                                        ) : (
                                            "Submit Team Registration"
                                        )}
                                    </Button>
                                </div>
                            </div>
                        </form>
                    </CardContent>
                </Card>

                {/* Dialog for Deletion */}
                <Dialog open={isDeleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
                    <DialogContent className="sm:max-w-[425px]">
                        <DialogHeader>
                            <DialogTitle className="flex items-center">
                                <AlertCircle className="mr-2 h-5 w-5 text-red-500" />
                                Confirm Player Removal
                            </DialogTitle>
                            <DialogDescription>
                                Are you sure you want to remove this player from your team? This action cannot be undone.
                            </DialogDescription>
                        </DialogHeader>
                        <DialogFooter className="flex flex-col sm:flex-row gap-2 sm:justify-between w-full mt-4">
                            <Button onClick={closeDeleteDialog} variant="outline" className="w-full sm:w-auto">
                                <X className="mr-2 h-4 w-4" /> Cancel
                            </Button>
                            <Button onClick={deletePlayer} variant="destructive" className="w-full sm:w-auto">
                                <Trash2 className="mr-2 h-4 w-4" /> Remove Player
                            </Button>
                        </DialogFooter>
                    </DialogContent>
                </Dialog>
            </div>
        </>
    )
}
